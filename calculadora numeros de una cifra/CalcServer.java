//Importing all the packages and classes

//Import the package which contains the Server Skeleton
import Calculator.*;

//Import the below two packages to use the Naming Service
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;

//Import this package to run the CORBA Application
import org.omg.CORBA.*;//

//Import the below to Classes for inheriting Portable Server
import org.omg.PortableServer.*;
import org.omg.PortableServer.POA;

//Initiate the ORB using the class Properties
import java.util.Properties;

//Perform the Input-Output functionalities
import java.io.*;
import java.util.*; 


//Write the Servant class
//It inherits the general CORBA utilities generated by the Compiler

class Calcserverimpl extends CalcPOA 

{

//orb variable is used to invoke the shutdown()
private ORB orb;

public void setORB(ORB orb_val)
 
{
    
orb = orb_val;
 
}
    

//Declaring and Implementing the required method
public int calculate(int a,int b,int c)

{

//ADDITION
if(a==43)
{
return (b+c);
}

//SUBTRACTION
else if(a==45)
{
return (b-c);
}

//MULTIPLICATION
else if(a==42)
{
return (b*c);
}

//DIVISION
else if(a==47)
{
return (b/c);
}

//EVEN
else if(a==37){//%
    if (c==0 && b==0){
        return 11;    //Tecnicamente ambos son pares, pero quiero comparar uno a la vez
    }else if(b==0){
        if(c % 2 == 0){
            return 1;  //Es par      
        }else{
            return 0;  //Es impar    
        } 
    }else if(c==0){
        if(b % 2 == 0){
            return 1;        
        }else{
            return 0;        
        } 
    }else{ //Comparo de 1 en 1
        return -1337;//Código de error
    }
}

//POWER
else if(a==94){//^
    int result=b;
    if(c==0){
        return 1;   //Cualquier numeo elevado a 0 es 1 
    }else{
       for(int i =1;i<c;i++){
            result=result*b; //Caso de cualquier numero elevado a algo que no sea 0
       } 
    }    
    return result;  
}

//FACTORIAL
else if(a==33)//!
{
    int factorial=1;
    if (c==0 && b==0){
            return 1; 
       //Es la única forma de comprobar el factorial a 0 sin utilizar librerías extra
       //Aunque técnicamente vale lo mismo que el factorial de 1 que funciona igual
     }else if(b==0){
            for(int i=2;i<=c;i++){
                factorial=factorial*i;
            }
            return factorial;
        }else if(c==0){
            for(int i=2;i<=b;i++){
                factorial=factorial*i;
            }
            return factorial;
        }else{
            return -1337;    //Variable de error
        }
}

//SQUARE ROOT
else if(a==35){//#
    int result=0;
    double x =1.0;
    int k;
    if (c==0 && b==0){
        return 0; //Por si acaso se ponen dos 0s
    }else if(b==0){
        for(k=1;k<10;k++){
            x=(x + c/x) / 2;
        }
        result=(int) x;
        return result;
    }else if(c==0){
        for(k=1;k<10;k++){
            x=(x + b/x) / 2;
        }
        result=(int) x;//Hay que hacer typecast que esta función devuelve ints y no doubles
        return result;
    }else{
        return -1337;    //Variable de error
    }
}
//Solo voy a hacer que funcione en caso de que o bien c o bien c valga 0

//DEFAULT
else
{
return 0;
}

}

//Closing the server 
  public void shutdown() 
{
    orb.shutdown(false);
}

}//end of the servant class


public class CalcServer
 
{

public static void main(String args[])
 
{

try

{

//Create and Initialize the ORB object
//init() allows to set the properties at run time


ORB orb=ORB.init(args,null);


//Obtain the initial Naming Context
//Obtain an initial object reference to the name server


//orb retrieves the reference to the Root POA
//Activate the POA Manager
//activate() causes the POAs to process the client requests


POA rootpoa=POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
rootpoa.the_POAManager().activate();


//The server instantiates the servant objects
//The servant performs the operations defined in the idlj interface


Calcserverimpl simpl=new Calcserverimpl();
simpl.setORB(orb); 


//Get the object reference associated with the servant
//narrow() is used to cast CORBA obj ref to its proper type


org.omg.CORBA.Object ref = rootpoa.servant_to_reference(simpl);
Calc href=CalcHelper.narrow(ref);
          
//Obtain the initial Naming Context
//Obtain an object reference to the Name Server


org.omg.CORBA.Object objRef=orb.resolve_initial_references("NameService");


//Narrow the objref to its proper type


NamingContextExt ncRef=NamingContextExtHelper.narrow(objRef);


//Register the Servant with the Name Server


String name = "Calc";


//NameComponent array contains the path to Calc


NameComponent path[]=ncRef.to_name(name);


//Pass the path and the servant object to the Naming Service
//Bind the servant object to Calc


ncRef.rebind(path,href);

System.out.println("The SERVER is READY");
System.out.println("The SERVER is WAITING to receive the CLIENT requests");


//run() is called by the main thread
//run() enables the ORB to perform work using the main thread
//the server waits until an invocation comes from the ORB


orb.run();

} 
        
catch (Exception e)

{

System.err.println("ERROR: " + e);
e.printStackTrace(System.out);

}


//This statement is executed when the Client wishes to discontinue          
System.out.println("The Server Exits");
    
}//end of main()

}//end of CalcServer()
